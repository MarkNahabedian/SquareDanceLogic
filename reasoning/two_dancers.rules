package reasoning

import "fmt"
import "squaredance/dancer"


// Pair represents two distinct Dancers.
// Note that rule_PairOfDancers does not filter by Dancer canonical ordering
// and the rete node that Joins one Dancer with another considers the those
// Dancers in both possible orderings, so for every two Dancers, two Pairs
// are made, one with one dancer as Dancer1, and the other with the other
// Danceer as Dancer1.  This should simplify a number of the other two Dancer
// rules, which dont need to consider which Dancer is which in a given Pair
// because there will be another Pair with its Dancers in the other ordering.
type Pair interface {
	Pair()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

func MakePair(dancer1, dancer2 dancer.Dancer) Pair {
	return Pair(&pair{ dancer1: dancer1, dancer2: dancer2 })
}

type pair struct {
	dancer1 dancer.Dancer
	dancer2 dancer.Dancer
}

func (p *pair) Pair() {}

// Dancer1 returns one dancer of a Pair.
func (p *pair) Dancer1() dancer.Dancer {
	return p.dancer1
}

// Dancer2 returns the Dancer of the Pair that is not returned by Dancer1.
func (p *pair) Dancer2() dancer.Dancer {
	return p.dancer2
}

// Should Pair be a Formation?


// rule_PairOfDancers groups each two Dancers pairwise.
func rule_PairOfDancers(dancer1, dancer2 dancer.Dancer) {
	// Note that for each pair of dancers we will create two Pair
	// objects: one each for the two possible orders of the dancers.
	if dancer1 != dancer2 {
		__node.Emit(Pair(&pair{dancer1: dancer1, dancer2: dancer2}))
	}
}


// A couple consists of two Dancers that are side by side and facing the
// same direction.
type Couple interface {
	Couple()
	Beau() dancer.Dancer
	Belle() dancer.Dancer
}


type couple struct {
	beau dancer.Dancer
	belle dancer.Dancer
}

func (c *couple) Couple() {}
func (c *couple) Beau() dancer.Dancer { return c.beau }
func (c *couple) Belle() dancer.Dancer { return c.belle }

func (mw *couple) String() string {
	return fmt.Sprintf("Couple(%s, %s)", mw.beau, mw.belle)
}

// NumberOfDancers is part of the Formation interface.
func (c *couple) NumberOfDancers() int { return 2 }

// Dancers is part of the Formation interface.
func (c *couple) Dancers() []dancer.Dancer {
	return []dancer.Dancer{ c.Beau(), c.Belle() }
}

// HasDancer is  part of the Formation interface.
func (c *couple) HasDancer(d dancer.Dancer) bool {
	if d == c.Beau()  { return true }
	if d == c.Belle()  { return true }
	return false
}

func rule_GeneralizedCouple(p Pair) {
	// Need to test nearness?
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	if RightOf(d1, d2) && LeftOf(d2, d1) {
		__node.Emit(Couple(&couple{beau: d1, belle: d2}))
	}
}


type MiniWave interface{
	Miniwave()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

type miniwave struct {
	dancer1 dancer.Dancer
	dancer2 dancer.Dancer
}

func (mw *miniwave) Miniwave() {}
func (mw *miniwave) Dancer1() dancer.Dancer { return mw.dancer1 }
func (mw *miniwave) Dancer2() dancer.Dancer { return mw.dancer2 }

func (mw *miniwave) String() string {
	return fmt.Sprintf("MiniWave(%s, %s)", mw.dancer1, mw.dancer2)
}

// func (mw *miniwave) Handedness() {}

// NumberOfDancers is part of the Formation interface.
func (mw *miniwave) NumberOfDancers() int { return 2 }

// Dancers is part of the Formation interface.
func (mw *miniwave) Dancers() []dancer.Dancer {
	return []dancer.Dancer{ mw.Dancer1(), mw.Dancer2() }
}

// HasDancer is  part of the Formation interface.
func (mw *miniwave) HasDancer(d dancer.Dancer) bool {
	if d == mw.Dancer1()  { return true }
	if d == mw.Dancer2()  { return true }
	return false
}

func rule_MiniWave(p Pair) {
	// Need to test nearness
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	if RightOf(d1, d2) && RightOf(d2, d1) {
		__node.Emit(MiniWave(&miniwave{dancer1: d1, dancer2: d2}))
		return
	}
	if LeftOf(d1, d2) && LeftOf(d2, d1) {
		__node.Emit(MiniWave(&miniwave{dancer1: d1, dancer2: d2}))
	}
}


// FaceToFaceDancers

type FaceToFace interface {
	FaceToFace()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

type facetoface struct {
	dancer1 dancer.Dancer
	dancer2 dancer.Dancer
}

func (ff *facetoface) FaceToFace() {}
func (ff *facetoface) Dancer1() dancer.Dancer {return ff.dancer1 }
func (ff *facetoface) Dancer2() dancer.Dancer {return ff.dancer2 } 

func (ff *facetoface) String() string {
	return fmt.Sprintf("FaceToFace(%s, %s)",ff.dancer1, ff.dancer2)
}

// NumberOfDancers is part of the Formation interface.
func (ff *facetoface) NumberOfDancers() int { return 2 }

// Dancers is part of the Formation interface.
func (ff *facetoface) Dancers() []dancer.Dancer {
	return []dancer.Dancer{ ff.Dancer1(), ff.Dancer2() }
}

// HasDancer is  part of the Formation interface.
func (ff *facetoface)  HasDancer(d dancer.Dancer) bool {
	if d == ff.Dancer1()  { return true }
	if d == ff.Dancer2()  { return true }
	return false
}

func rule_FaceToFace(p Pair) {
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	// Need to test adjacency
	if InFrontOf(d1, d2) && InFrontOf(d2, d1) {
		__node.Emit(FaceToFace(&facetoface{dancer1: d1, dancer2: d2}))
	}
}


// BackToBackDancers
// Tandem