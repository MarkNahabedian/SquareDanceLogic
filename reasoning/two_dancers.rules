package reasoning

import "squaredance/dancer"


// Pair represents two distinct Dancers.
// Note that rule_PairOfDancers does not filter by Dancer canonical ordering
// and the rete node that Joins one Dancer with another considers the those
// Dancers in both possible orderings, so for every two Dancers, two Pairs
// are made, one with one dancer as Dancer1, and the other with the other
// Danceer as Dancer1.  This should simplify a number of the other two Dancer
// rules, which dont need to consider which Dancer is which in a given Pair
// because there will be another Pair with its Dancers in the other ordering.
type Pair interface {
	// Should Pair be a Formation?
	Pair()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

func MakePair(dancer1, dancer2 dancer.Dancer) Pair {
	return Pair(&pair{ dancer1: dancer1, dancer2: dancer2 })
}

type pair struct {
	dancer1 dancer.Dancer
	dancer2 dancer.Dancer
}

func (p *pair) Pair() {}

// Dancer1 returns one dancer of a Pair.
func (p *pair) Dancer1() dancer.Dancer {
	return p.dancer1
}

// Dancer2 returns the Dancer of the Pair that is not returned by Dancer1.
func (p *pair) Dancer2() dancer.Dancer {
	return p.dancer2
}

// rule_PairOfDancers groups each two Dancers pairwise.
func rule_PairOfDancers(dancer1, dancer2 dancer.Dancer) {
	// Note that for each pair of dancers we will create two Pair
	// objects: one each for the two possible orders of the dancers.
	if dancer1 != dancer2 {
		__node.Emit(Pair(&pair{dancer1: dancer1, dancer2: dancer2}))
	}
}


// A couple consists of two Dancers that are side by side and facing the
// same direction.
type Couple interface {
	Formation
	Couple()
	Beau() dancer.Dancer
	Belle() dancer.Dancer
}

func rule_GeneralizedCouple(p Pair) {
	// Need to test nearness?
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	if RightOf(d1, d2) && LeftOf(d2, d1) {
		__node.Emit(Couple(&implCouple{beau: d1, belle: d2}))
	}
}


type MiniWave interface{
	Formation
	MiniWave()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

// func (mw *miniwave) Handedness() {}

func rule_MiniWave(p Pair) {
	// Need to test nearness
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	if RightOf(d1, d2) && RightOf(d2, d1) {
		__node.Emit(MiniWave(&implMiniWave{dancer1: d1, dancer2: d2}))
		return
	}
	if LeftOf(d1, d2) && LeftOf(d2, d1) {
		__node.Emit(MiniWave(&implMiniWave{dancer1: d1, dancer2: d2}))
	}
}


type FaceToFace interface {
	Formation
	FaceToFace()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

func rule_FaceToFace(p Pair) {
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	// Need to test adjacency
	if InFrontOf(d1, d2) && InFrontOf(d2, d1) {
		__node.Emit(FaceToFace(&implFaceToFace{dancer1: d1, dancer2: d2}))
	}
}


type BackToBack interface {
	Formation
	BackToBack()
	Dancer1() dancer.Dancer
	Dancer2() dancer.Dancer
}

func rule_BackToBack(p Pair) {
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	// Need to test adjacency
	if Behind(d1, d2) && Behind(d2, d1) {
		__node.Emit(BackToBack(&implBackToBack{dancer1: d1, dancer2: d2}))
	}
}


type Tandem interface {
	Formation
	Tandem()
	Leader() dancer.Dancer
	Trailer() dancer.Dancer
}

func rule_Tandem(p Pair) {
	d1 := p.Dancer1()
	d2 := p.Dancer2()
	// Need to test adjacency
	if Behind(d1, d2) && InFrontOf(d2, d1) {
		__node.Emit(Tandem(&implTandem{leader: d1, trailer: d2}))
	}
}

